#!/usr/bin/env groovy

pipeline {
  agent { label 'mesos' }
  parameters {
    string name: 'DCOS_CHANNEL', description: 'DC/OS Release Channel', defaultValue: 'testing/master'
    string name: 'CF_TEMPLATE_URL', description: 'CloudFormation Template URL', defaultValue: ''
    string name: 'CF_TEMPLATE_NAME', description: 'CloudFormation Template Name', defaultValue: 'ee.single-master.cloudformation.json'
  }
  environment {
    CCM_AUTH_TOKEN = credentials('8e2b2400-0f14-4e4d-b319-e1360f97627d')
    DCOS_CHANNEL = "${params.DCOS_CHANNEL}"
    CF_TEMPLATE_URL = "${params.CF_TEMPLATE_URL}"
    CF_TEMPLATE_NAME = "${params.CF_TEMPLATE_NAME}"
    CLUSTER_NAME = "DCOSCLI-SCRIPTS-TEST-${env.BUILD_NUMBER}"
  }
  stages {
    stage('Build Docker Image') {
      agent { label 'mesos' }
      steps {
        checkout scm
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail

           echo "Building docker image..."
           docker build -f ccm/Dockerfile -t ccm:${BUILD_NUMBER} .

           echo "Saving docker image to file..."
           docker save --output .stash-docker-ccm-${BUILD_NUMBER}.tar ccm:${BUILD_NUMBER}
           '''
        stash name: 'docker', includes: '.stash-docker-*'
      }
    }
    stage('Create CCM Cluster') {
      agent { label 'mesos' }
      steps {
        checkout scm
        unstash 'docker'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail

           echo "Loading docker image from file..."
           docker load --input .stash-docker-ccm-${BUILD_NUMBER}.tar

           echo "Creating CCM Cluster..."
           CLUSTER_ID="$(docker run \
               --rm=true \
               --env DCOS_CHANNEL="${DCOS_CHANNEL}" \
               --env CLUSTER_NAME="${CLUSTER_NAME}" \
               --env CCM_AUTH_TOKEN="${CCM_AUTH_TOKEN}" \
               --env CF_TEMPLATE_URL="${CF_TEMPLATE_URL:-}" \
               --env CF_TEMPLATE_NAME="${CF_TEMPLATE_NAME:-}" \
               ccm:${BUILD_NUMBER} \
               start_ccm_cluster.sh)"
           [[ -z "${CLUSTER_ID}" ]] && echo >&2 "CCM did not provide a CLUSTER_ID. Failing build..." && exit 1 || true
           echo "${CLUSTER_ID}" > .stash-ccm-cluster-id

           echo "Waiting for CCM Cluster..."
           CLUSTER_ID="$(cat .stash-ccm-cluster-id)"
           DCOS_URL="$(docker run \
               --rm=true \
               --env CLUSTER_ID="${CLUSTER_ID}" \
               --env CCM_AUTH_TOKEN="${CCM_AUTH_TOKEN}" \
               ccm:${BUILD_NUMBER} \
               wait_for_ccm_cluster.sh)"
           [[ -z "${DCOS_URL}" ]] && echo >&2 "CCM did not provide a DCOS_URL. Failing build..." && exit 1 || true
           echo "${DCOS_URL}" > .stash-ccm-dcos-url
           '''
        stash name: 'ccm', includes: '.stash-ccm-*'
      }
    }
    stage('Test Install Script (Linux)') {
      agent { label 'mesos' }
      steps {
        checkout scm
        unstash 'ccm'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           DCOS_URL="$(cat .stash-ccm-dcos-url)"
           EXE_PATH="$(bin/install/install-binary-dcos-cli.sh "${DCOS_URL}")"
           echo "${EXE_PATH}"
           [[ -z "${EXE_PATH}" ]] && echo >&2 "Executable path not printed by install script. Failing build..." && exit 1 || true
           [[ ! -e "${EXE_PATH}" ]] && echo >&2 "Executable not found. Failing build..." && exit 1 || true
           '''
      }
    }
    stage('Test Install Script (Mac)') {
      agent { label 'mac' }
      steps {
        checkout scm
        unstash 'ccm'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           DCOS_URL="$(cat .stash-ccm-dcos-url)"
           EXE_PATH="$(bin/install/install-binary-dcos-cli.sh "${DCOS_URL}")"
           echo "${EXE_PATH}"
           [[ -z "${EXE_PATH}" ]] && echo >&2 "Executable path not printed by install script. Failing build..." && exit 1 || true
           [[ ! -e "${EXE_PATH}" ]] && echo >&2 "Executable not found. Failing build..." && exit 1 || true
           '''
      }
    }
    // Windows test disabled
    // TODO: bash on windows
    /*
    stage('Test Install Script (Windows)') {
      agent { label 'windows' }
      steps {
        checkout scm
        unstash 'ccm'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           DCOS_URL="$(cat .stash-ccm-dcos-url)"
           EXE_PATH="$(bin/install/install-binary-dcos-cli.sh "${DCOS_URL}")"
           echo "${EXE_PATH}"
           [[ -z "${EXE_PATH}" ]] && echo >&2 "Executable path not printed by install script. Failing build..." && exit 1 || true
           [[ ! -e "${EXE_PATH}" ]] && echo >&2 "Executable not found. Failing build..." && exit 1 || true
           '''
      }
    }
    */
  }
  post {
    always {
      checkout scm
      unstash 'ccm'
      unstash 'docker'
      sh '''#!/usr/bin/env bash
         set -o errexit -o nounset -o pipefail

         CLUSTER_ID="$(cat .stash-ccm-cluster-id)"
         [[ -z "${CLUSTER_ID}" ]] && echo >&2 "No cluster to destroy (empty CLUSTER_ID). Failing build..." && exit 1 || true

         echo "Loading docker image from file..."
         docker load --input .stash-docker-ccm-${BUILD_NUMBER}.tar

         echo "Deleting CCM Cluster..."
         docker run \
             --rm=true \
             --env CLUSTER_ID="${CLUSTER_ID}" \
             --env CCM_AUTH_TOKEN="${CCM_AUTH_TOKEN}" \
             ccm:${BUILD_NUMBER} \
             delete_ccm_cluster.sh
         '''
    }
  }
}
