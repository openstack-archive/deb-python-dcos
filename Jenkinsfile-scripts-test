#!/usr/bin/env groovy

pipeline {
  agent { label 'mesos' }
  parameters {
    string name: 'DCOS_CHANNEL', description: 'DC/OS Release Channel', defaultValue: 'testing/master'
    string name: 'CF_TEMPLATE_URL', description: 'CloudFormation Template URL', defaultValue: ''
    string name: 'CF_TEMPLATE_NAME', description: 'CloudFormation Template Name', defaultValue: 'ee.single-master.cloudformation.json'
  }
  environment {
    CCM_AUTH_TOKEN = credentials('8e2b2400-0f14-4e4d-b319-e1360f97627d')
  }
  stages {
    stage('Create CCM Cluster') {
      agent { label 'mesos' }
      steps {
        checkout scm
        sh 'docker build -f cli/binary/Dockerfile.linux-binary -t linux-binary:${BUILD_NUMBER} .'
        sh """#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           CLUSTER_ID="$(docker run \
               --rm=true \
               --env DCOS_CHANNEL=${params.DCOS_CHANNEL} \
               --env CLUSTER_NAME=DCOSCLI-JENKINS-${BUILD_NUMBER} \
               --env CCM_AUTH_TOKEN=${CCM_AUTH_TOKEN} \
               --env CF_TEMPLATE_URL=${params.CF_TEMPLATE_URL} \
               --env CF_TEMPLATE_NAME=${params.CF_TEMPLATE_NAME} \
               linux-binary:${BUILD_NUMBER} \
               /bin/bash -c ../ccm/start_ccm_cluster.sh)"
           [[ -z "${CLUSTER_ID}" ]] && echo >&2 "CCM did not provide a CLUSTER_ID. Failing build..." && exit 1
           cat "${CLUSTER_ID}" > .stash-cluster-id
           """
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           CLUSTER_ID="$(cat .stash-cluster-id)"
           DCOS_URL="$(docker run \
               --rm=true \
               --env CLUSTER_ID=${CLUSTER_ID} \
               --env CCM_AUTH_TOKEN=${CCM_AUTH_TOKEN} \
               linux-binary:${BUILD_NUMBER} \
               /bin/bash -c ../ccm/wait_for_ccm_cluster.sh)"
           [[ -z "${DCOS_URL}" ]] && echo >&2 "CCM did not provide a DCOS_URL. Failing build..." && exit 1
           cat "${DCOS_URL}" > .stash-dcos-url
           '''
        stash name: 'ccm', includes: '.stash-*'
      }
    }
    stage('Test Install Script (Linux)') {
      agent { label 'mesos' }
      steps {
        checkout scm
        unstash 'ccm'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           DCOS_URL="$(cat .stash-dcos-url)"
           EXE_PATH="$(bin/install/install-binary-dcos-cli.sh "${DCOS_URL}")"
           echo "${EXE_PATH}"
           [[ -z "${EXE_PATH}" ]] && echo >&2 "Executable path not printed by install script. Failing build..." && exit 1
           [[ ! -e "${EXE_PATH}" ]] && echo >&2 "Executable not found. Failing build..." && exit 1
           '''
      }
    }
    stage('Test Install Script (Mac)') {
      agent { label 'mac' }
      steps {
        checkout scm
        unstash 'ccm'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           DCOS_URL="$(cat .stash-dcos-url)"
           EXE_PATH="$(bin/install/install-binary-dcos-cli.sh "${DCOS_URL}")"
           echo "${EXE_PATH}"
           [[ -z "${EXE_PATH}" ]] && echo >&2 "Executable path not printed by install script. Failing build..." && exit 1
           [[ ! -e "${EXE_PATH}" ]] && echo >&2 "Executable not found. Failing build..." && exit 1
           '''
      }
    }
    stage('Test Install Script (Windows)') {
      agent { label 'windows' }
      steps {
        checkout scm
        unstash 'ccm'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           DCOS_URL="$(cat .stash-dcos-url)"
           EXE_PATH="$(bin/install/install-binary-dcos-cli.sh "${DCOS_URL}")"
           echo "${EXE_PATH}"
           [[ -z "${EXE_PATH}" ]] && echo >&2 "Executable path not printed by install script. Failing build..." && exit 1
           [[ ! -e "${EXE_PATH}" ]] && echo >&2 "Executable not found. Failing build..." && exit 1
           '''
      }
    }
    stage('Destroy CCM Cluster') {
      agent { label 'mesos' }
      steps {
        checkout scm
        unstash 'ccm'
        sh 'docker build -f cli/binary/Dockerfile.linux-binary -t linux-binary:${BUILD_NUMBER} .'
        sh '''#!/usr/bin/env bash
           set -o errexit -o nounset -o pipefail
           CLUSTER_ID="$(cat .stash-cluster-id)"
           docker run \
               --rm=true \
               --env CLUSTER_ID=${CLUSTER_ID} \
               --env CCM_AUTH_TOKEN=${CCM_AUTH_TOKEN} \
               linux-binary:${BUILD_NUMBER} \
               /bin/bash -c ../ccm/delete_ccm_cluster.sh
           '''
      }
    }
  }
}
